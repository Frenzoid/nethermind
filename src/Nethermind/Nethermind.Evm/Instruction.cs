// SPDX-FileCopyrightText: 2022 Demerzel Solutions Limited
// SPDX-License-Identifier: LGPL-3.0-only

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using FastEnumUtility;
using Nethermind.Core.Collections;
using Nethermind.Core.Specs;

namespace Nethermind.Evm
{
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    public enum Instruction : byte
    {
        STOP,
        ADD,
        MUL,
        SUB,
        DIV,
        SDIV,
        MOD,
        SMOD,
        ADDMOD,
        MULMOD,
        EXP,
        SIGNEXTEND,
        LT,
        GT,
        SLT,
        SGT,
        EQ,
        ISZERO,
        AND,
        OR,
        XOR,
        NOT,
        BYTE,
        SHL, // EIP-145
        SHR, // EIP-145
        SAR, // EIP-145
        SHA3,
        ADDRESS,
        BALANCE,
        ORIGIN,
        CALLER,
        CALLVALUE,
        CALLDATALOAD,
        CALLDATASIZE,
        CALLDATACOPY,
        CODESIZE,
        CODECOPY,
        GASPRICE,
        EXTCODESIZE,
        EXTCODECOPY,
        RETURNDATASIZE,
        RETURNDATACOPY,
        EXTCODEHASH,
        BLOCKHASH,
        COINBASE,
        TIMESTAMP,
        NUMBER,
        PREVRANDAO,
        GASLIMIT,
        CHAINID,
        SELFBALANCE,
        BASEFEE,
        BLOBHASH,
        POP,
        MLOAD,
        MSTORE,
        MSTORE8,
        SLOAD,
        SSTORE,
        JUMP,
        JUMPI,
        PC,
        MSIZE,
        GAS,
        JUMPDEST,
        BEGINSUB,
        RETURNSUB,
        JUMPSUB,
        PUSH0, // EIP-3855
        PUSH1,
        PUSH2,
        PUSH3,
        PUSH4,
        PUSH5,
        PUSH6,
        PUSH7,
        PUSH8,
        PUSH9,
        PUSH10,
        PUSH11,
        PUSH12,
        PUSH13,
        PUSH14,
        PUSH15,
        PUSH16,
        PUSH17,
        PUSH18,
        PUSH19,
        PUSH20,
        PUSH21,
        PUSH22,
        PUSH23,
        PUSH24,
        PUSH25,
        PUSH26,
        PUSH27,
        PUSH28,
        PUSH29,
        PUSH30,
        PUSH31,
        PUSH32,
        DUP1,
        DUP2,
        DUP3,
        DUP4,
        DUP5,
        DUP6,
        DUP7,
        DUP8,
        DUP9,
        DUP10,
        DUP11,
        DUP12,
        DUP13,
        DUP14,
        DUP15,
        DUP16,
        SWAP1,
        SWAP2,
        SWAP3,
        SWAP4,
        SWAP5,
        SWAP6,
        SWAP7,
        SWAP8,
        SWAP9,
        SWAP10,
        SWAP11,
        SWAP12,
        SWAP13,
        SWAP14,
        SWAP15,
        SWAP16,
        LOG0,
        LOG1,
        LOG2,
        LOG3,
        LOG4,
        TLOAD,
        TSTORE,
        CREATE,
        CALL,
        CALLCODE,
        RETURN,
        DELEGATECALL,
        CREATE2,
        STATICCALL,
        REVERT,
        INVALID,
        SELFDESTRUCT,
    }

    public class InstructionResolver
    {
        public InstructionResolver(IReleaseSpec spec) => _spec = spec;

        private IReleaseSpec _spec;
        private Dictionary<byte, Instruction> _InstructionMappingPostCancun => throw new NotImplementedException(); 
        private Dictionary<byte, Instruction> _InstructionMappingPreCancun = new()
        {
            [0x00] = Instruction.STOP,
            [0x01] = Instruction.ADD,
            [0x02] = Instruction.MUL,
            [0x03] = Instruction.SUB,
            [0x04] = Instruction.DIV,
            [0x05] = Instruction.SDIV,
            [0x06] = Instruction.MOD,
            [0x07] = Instruction.SMOD,
            [0x08] = Instruction.ADDMOD,
            [0x09] = Instruction.MULMOD,
            [0x0a] = Instruction.EXP,
            [0x0b] = Instruction.SIGNEXTEND,
            [0x10] = Instruction.LT,
            [0x11] = Instruction.GT,
            [0x12] = Instruction.SLT,
            [0x13] = Instruction.SGT,
            [0x14] = Instruction.EQ,
            [0x15] = Instruction.ISZERO,
            [0x16] = Instruction.AND,
            [0x17] = Instruction.OR,
            [0x18] = Instruction.XOR,
            [0x19] = Instruction.NOT,
            [0x1a] = Instruction.BYTE,
            [0x1b] = Instruction.SHL,
            [0x1c] = Instruction.SHR,
            [0x1d] = Instruction.SAR,
            [0x20] = Instruction.SHA3,
            [0x30] = Instruction.ADDRESS,
            [0x31] = Instruction.BALANCE,
            [0x32] = Instruction.ORIGIN,
            [0x33] = Instruction.CALLER,
            [0x34] = Instruction.CALLVALUE,
            [0x35] = Instruction.CALLDATALOAD,
            [0x36] = Instruction.CALLDATASIZE,
            [0x37] = Instruction.CALLDATACOPY,
            [0x38] = Instruction.CODESIZE,
            [0x39] = Instruction.CODECOPY,
            [0x3a] = Instruction.GASPRICE,
            [0x3b] = Instruction.EXTCODESIZE,
            [0x3c] = Instruction.EXTCODECOPY,
            [0x3d] = Instruction.RETURNDATASIZE,
            [0x3e] = Instruction.RETURNDATACOPY,
            [0x3f] = Instruction.EXTCODEHASH,
            [0x40] = Instruction.BLOCKHASH,
            [0x41] = Instruction.COINBASE,
            [0x42] = Instruction.TIMESTAMP,
            [0x43] = Instruction.NUMBER,
            [0x44] = Instruction.PREVRANDAO,
            [0x45] = Instruction.GASLIMIT,
            [0x46] = Instruction.CHAINID,
            [0x47] = Instruction.SELFBALANCE,
            [0x48] = Instruction.BASEFEE,
            [0x49] = Instruction.BLOBHASH,
            [0x50] = Instruction.POP,
            [0x51] = Instruction.MLOAD,
            [0x52] = Instruction.MSTORE,
            [0x53] = Instruction.MSTORE8,
            [0x54] = Instruction.SLOAD,
            [0x55] = Instruction.SSTORE,
            [0x56] = Instruction.JUMP,
            [0x57] = Instruction.JUMPI,
            [0x58] = Instruction.PC,
            [0x59] = Instruction.MSIZE,
            [0x5a] = Instruction.GAS,
            [0x5b] = Instruction.JUMPDEST,
            [0x5c] = Instruction.BEGINSUB,
            [0x5d] = Instruction.RETURNSUB,
            [0x5e] = Instruction.JUMPSUB,
            [0x5f] = Instruction.PUSH0,
            [0x60] = Instruction.PUSH1,
            [0x61] = Instruction.PUSH2,
            [0x62] = Instruction.PUSH3,
            [0x63] = Instruction.PUSH4,
            [0x64] = Instruction.PUSH5,
            [0x65] = Instruction.PUSH6,
            [0x66] = Instruction.PUSH7,
            [0x67] = Instruction.PUSH8,
            [0x68] = Instruction.PUSH9,
            [0x69] = Instruction.PUSH10,
            [0x6a] = Instruction.PUSH11,
            [0x6b] = Instruction.PUSH12,
            [0x6c] = Instruction.PUSH13,
            [0x6d] = Instruction.PUSH14,
            [0x6e] = Instruction.PUSH15,
            [0x6f] = Instruction.PUSH16,
            [0x70] = Instruction.PUSH17,
            [0x71] = Instruction.PUSH18,
            [0x72] = Instruction.PUSH19,
            [0x73] = Instruction.PUSH20,
            [0x74] = Instruction.PUSH21,
            [0x75] = Instruction.PUSH22,
            [0x76] = Instruction.PUSH23,
            [0x77] = Instruction.PUSH24,
            [0x78] = Instruction.PUSH25,
            [0x79] = Instruction.PUSH26,
            [0x7a] = Instruction.PUSH27,
            [0x7b] = Instruction.PUSH28,
            [0x7c] = Instruction.PUSH29,
            [0x7d] = Instruction.PUSH30,
            [0x7e] = Instruction.PUSH31,
            [0x7f] = Instruction.PUSH32,
            [0x80] = Instruction.DUP1,
            [0x81] = Instruction.DUP2,
            [0x82] = Instruction.DUP3,
            [0x83] = Instruction.DUP4,
            [0x84] = Instruction.DUP5,
            [0x85] = Instruction.DUP6,
            [0x86] = Instruction.DUP7,
            [0x87] = Instruction.DUP8,
            [0x88] = Instruction.DUP9,
            [0x89] = Instruction.DUP10,
            [0x8a] = Instruction.DUP11,
            [0x8b] = Instruction.DUP12,
            [0x8c] = Instruction.DUP13,
            [0x8d] = Instruction.DUP14,
            [0x8e] = Instruction.DUP15,
            [0x8f] = Instruction.DUP16,
            [0x90] = Instruction.SWAP1,
            [0x91] = Instruction.SWAP2,
            [0x92] = Instruction.SWAP3,
            [0x93] = Instruction.SWAP4,
            [0x94] = Instruction.SWAP5,
            [0x95] = Instruction.SWAP6,
            [0x96] = Instruction.SWAP7,
            [0x97] = Instruction.SWAP8,
            [0x98] = Instruction.SWAP9,
            [0x99] = Instruction.SWAP10,
            [0x9a] = Instruction.SWAP11,
            [0x9b] = Instruction.SWAP12,
            [0x9c] = Instruction.SWAP13,
            [0x9d] = Instruction.SWAP14,
            [0x9e] = Instruction.SWAP15,
            [0x9f] = Instruction.SWAP16,
            [0xa0] = Instruction.LOG0,
            [0xa1] = Instruction.LOG1,
            [0xa2] = Instruction.LOG2,
            [0xa3] = Instruction.LOG3,
            [0xa4] = Instruction.LOG4,
            [0xb3] = Instruction.TLOAD,
            [0xb4] = Instruction.TSTORE,
            [0xf0] = Instruction.CREATE,
            [0xf1] = Instruction.CALL,
            [0xf2] = Instruction.CALLCODE,
            [0xf3] = Instruction.RETURN,
            [0xf4] = Instruction.DELEGATECALL,
            [0xf5] = Instruction.CREATE2,
            [0xfa] = Instruction.STATICCALL,
            [0xfd] = Instruction.REVERT,
            [0xfe] = Instruction.INVALID,
            [0xff] = Instruction.SELFDESTRUCT,
        };

        public Instruction GetInstruction(byte Instruction)
        {
            if(_spec.IsCancunOpcodeShuffleEnabled)
            {
                return _InstructionMappingPostCancun[Instruction];

            }
            else
            {
                return _InstructionMappingPreCancun[Instruction];
            }
        }
    }
    
    public static class InstructionExtensions
    {
        public static string? GetName(this Instruction Instruction, bool isPostMerge = false) =>
            (Instruction == Instruction.PREVRANDAO && !isPostMerge)
                ? "DIFFICULTY"
                : FastEnum.IsDefined(Instruction)
                    ? FastEnum.GetName(Instruction)
                    : null;
    }
}

