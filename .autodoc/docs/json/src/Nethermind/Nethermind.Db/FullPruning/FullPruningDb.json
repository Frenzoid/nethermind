{
  "fileName": "FullPruningDb.cs",
  "filePath": "src/Nethermind/Nethermind.Db/FullPruning/FullPruningDb.cs",
  "url": "https://github.com/nethermindeth/nethermind/Nethermind.Db/FullPruning/FullPruningDb.cs",
  "summary": "The `FullPruningDb` class is a database facade that allows full pruning. It is part of the Nethermind project and is located in the `nethermind` directory. The purpose of this class is to provide a way to start pruning in a thread-safe way, duplicate all writes to the current database as well as the new one for full pruning, and delete the pruning database if the pruning was not successful. It uses `IRocksDbFactory` to create new pruning databases, and the `FullPruningInnerDbFactory` class to organize inner sub-databases.\n\nThe `FullPruningDb` class implements several interfaces, including `IDb`, `IFullPruningDb`, and `ITunableDb`. It has a constructor that takes `RocksDbSettings`, `IRocksDbFactory`, and an optional `Action` parameter. The `CreateDb` method creates a new database using the `IRocksDbFactory`. The `this` indexer is used to get or set values in the database. When getting a value, it reads from the main database and duplicates the read to the secondary, copied database if pruning is in progress. When setting a value, it writes to the main database and duplicates the write to the secondary, copied database if pruning is in progress. The `Get` method is similar to the `this` indexer, but it allows for additional `ReadFlags`.\n\nThe `StartBatch` method starts a new batch and duplicates writes that are in batches. The `Dispose` method disposes of the current and cloning databases. The `Name` property returns the name of the database. The `this[byte[][] keys]` indexer returns an array of key-value pairs. The `GetAll` and `GetAllValues` methods return all key-value pairs or all values, respectively. The `Remove` method removes a key-value pair from both databases. The `KeyExists` method checks if a key exists in the database. The `Innermost` property returns the current database. The `Flush` method flushes both databases. The `Clear` method clears both databases.\n\nThe `TryStartPruning` method starts pruning in a thread-safe way. It creates a new pruning context with a new sub-database and tries to set it as current. It returns true when new pruning is started and false only on multithreaded access. The `GetPath` method returns the path of the database. The `InnerDbName` property returns the name of the current database. The `PruningStarted` and `PruningFinished` events are raised when pruning starts and finishes, respectively. The `FinishPruning` method finishes pruning and clears the old database. The `ClearOldDb` method clears the old database. The `DuplicatingBatch` class duplicates writes to the current and cloned database batches. The `Tune` method tunes the database.\n\nIn summary, the `FullPruningDb` class provides a way to start pruning in a thread-safe way, duplicate all writes to the current database as well as the new one for full pruning, and delete the pruning database if the pruning was not successful. It is part of the Nethermind project and is located in the `nethermind` directory. It implements several interfaces, including `IDb`, `IFullPruningDb`, and `ITunableDb`. It uses `IRocksDbFactory` to create new pruning databases, and the `FullPruningInnerDbFactory` class to organize inner sub-databases.",
  "questions": "1. What is the purpose of this code and how does it relate to the overall nethermind project?\n- This code is a database facade that allows full pruning and is part of the nethermind project.\n2. How does this code handle multithreaded access?\n- The code uses Interlocked.CompareExchange to ensure that only one pruning context can be active at a time, and uses thread-safe data structures like ConcurrentQueue to handle batches of writes.\n3. What is the role of IRocksDbFactory in this code?\n- IRocksDbFactory is used to create new pruning DBs, and FullPruningInnerDbFactory is used to organize inner sub-DBs.",
  "checksum": "ec9eb074d502dec372d1ece19d5afb19"
}