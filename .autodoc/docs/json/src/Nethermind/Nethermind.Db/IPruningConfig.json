{
  "fileName": "IPruningConfig.cs",
  "filePath": "src/Nethermind/Nethermind.Db/IPruningConfig.cs",
  "url": "https://github.com/nethermindeth/nethermind/Nethermind.Db/IPruningConfig.cs",
  "summary": "This code defines an interface called `IPruningConfig` that is used to configure the pruning parameters for the Nethermind project. Pruning is the process of removing some of the intermediary state nodes, which saves disk space but can make most of the historical state queries fail. The interface contains several properties that can be used to configure the pruning mode, cache size, persistence interval, full pruning threshold, full pruning trigger, maximum degree of parallelism, memory budget, minimum delay between allowed full pruning operations, and completion behavior.\n\nThe `PruningMode` property is used to set the pruning mode, which can be one of the following: 'None', 'Memory', 'Full', or 'Hybrid'. The `CacheMb` property is used to set the pruning cache size in MB, which is the amount of historical nodes data to store in cache. The `PersistenceInterval` property is used to define how often blocks will be persisted even if not required by cache memory usage. The `FullPruningThresholdMb` property is used to define the threshold in MB to trigger full pruning, which depends on the `Mode` and `FullPruningTrigger`. The `FullPruningTrigger` property is used to define the trigger for full pruning, which can be either the size of StateDB or free space left on Volume where StateDB is located. The `FullPruningMaxDegreeOfParallelism` property is used to define how many parallel tasks and potentially used threads can be created by full pruning. The `FullPruningMemoryBudgetMb` property is used to set the memory budget used for the trie visit. The `FullPruningMinimumDelayHours` property is used to define the minimum delay between allowed full pruning operations. The `FullPruningCompletionBehavior` property is used to determine what to do after Nethermind completes a full prune.\n\nThis interface is annotated with `ConfigCategory` and `ConfigItem` attributes that provide descriptions and default values for each property. These annotations are used by the Nethermind configuration system to generate configuration files and provide documentation for users.\n\nThis interface can be used by other parts of the Nethermind project to configure the pruning parameters. For example, the `Nethermind.Runner` project uses this interface to configure the pruning parameters for the Nethermind node. Here is an example of how this interface can be used:\n\n```csharp\nIPruningConfig pruningConfig = new PruningConfig();\npruningConfig.Mode = PruningMode.Full;\npruningConfig.CacheMb = 2048;\npruningConfig.FullPruningThresholdMb = 512000;\n// ... set other properties ...\n```\n\nIn this example, we create a new instance of `PruningConfig` that implements the `IPruningConfig` interface. We then set the `Mode`, `CacheMb`, and `FullPruningThresholdMb` properties to configure the pruning parameters.",
  "questions": "1. What is the purpose of this code?\n- This code defines an interface for configuring pruning parameters in the Nethermind database.\n\n2. What is pruning and how does it work in Nethermind?\n- Pruning is the process of removing some of the intermediary state nodes in the database to save disk space, but it can make most of the historical state queries fail. Nethermind offers different modes of pruning, such as 'None', 'Memory', 'Full', and 'Hybrid', and allows users to configure parameters such as cache size, persistence interval, threshold, trigger, degree of parallelism, memory budget, and completion behavior.\n\n3. What is the recommended value for FullPruningMaxDegreeOfParallelism?\n- The recommended value for FullPruningMaxDegreeOfParallelism depends on the type of the node. If the node needs to be responsive (its RPC or Validator node), then the recommended value is below the number of logical processors. If the node doesn't have much other responsibilities but needs to be reliably able to follow the chain without any delays and produce live logs, the default value is recommended. If the node doesn't have to be responsive, has very fast I/O (like NVME), and the shortest pruning time is to be achieved, this can be set to 2-3x of the number of logical processors.",
  "checksum": "683d42749a92cfe02643c4ace811397a"
}