{
  "fileName": "AdminRpcModule.cs",
  "filePath": "src/Nethermind/Nethermind.JsonRpc/Modules/Admin/AdminRpcModule.cs",
  "url": "https://github.com/nethermindeth/nethermind/Nethermind.JsonRpc/Modules/Admin/AdminRpcModule.cs",
  "summary": "The `AdminRpcModule` class is a module that provides an implementation of the JSON-RPC API for administrative tasks in the Nethermind Ethereum client. It exposes a set of methods that allow the user to perform various administrative tasks such as adding and removing peers, retrieving information about the node, and triggering pruning of the blockchain data.\n\nThe class constructor takes several dependencies as arguments, including an instance of `IBlockTree`, `INetworkConfig`, `IPeerPool`, `IStaticNodesManager`, `IEnode`, `string`, and `ManualPruningTrigger`. These dependencies are used to build the `NodeInfo` object that contains information about the node, including its name, enode, IP address, and port number. The `UpdateEthProtocolInfo` method is called to update the `NodeInfo` object with information about the Ethereum protocol, including the current difficulty, chain ID, head hash, and genesis hash.\n\nThe `admin_addPeer` method allows the user to add a new peer to the node. If the `addToStaticNodes` parameter is set to `true`, the peer is added to the static nodes list. Otherwise, a new `NetworkNode` object is created with the specified enode, and a new `Node` object is added to the `IPeerPool`. The method returns a `ResultWrapper<string>` object that contains the enode of the added peer if successful, or an error message if the operation fails.\n\nThe `admin_removePeer` method allows the user to remove a peer from the node. If the `removeFromStaticNodes` parameter is set to `true`, the peer is removed from the static nodes list. Otherwise, the peer is removed from the `IPeerPool`. The method returns a `ResultWrapper<string>` object that contains the enode of the removed peer if successful, or an error message if the operation fails.\n\nThe `admin_peers` method returns a list of active peers connected to the node. If the `includeDetails` parameter is set to `true`, detailed information about each peer is included in the response. The method returns a `ResultWrapper<PeerInfo[]>` object that contains an array of `PeerInfo` objects.\n\nThe `admin_nodeInfo` method returns information about the node, including its name, enode, IP address, and port number, as well as information about the Ethereum protocol, including the current difficulty, chain ID, head hash, and genesis hash. The method returns a `ResultWrapper<NodeInfo>` object that contains the `NodeInfo` object.\n\nThe `admin_dataDir` method returns the data directory path of the node. The method returns a `ResultWrapper<string>` object that contains the data directory path.\n\nThe `admin_setSolc` method is a placeholder method that always returns `true`. It is not currently implemented.\n\nThe `admin_prune` method triggers pruning of the blockchain data. The method returns a `ResultWrapper<PruningStatus>` object that contains the status of the pruning operation.",
  "questions": "1. What is the purpose of this code file?\n- This code file defines the `AdminRpcModule` class, which is a module for handling JSON-RPC requests related to administrative tasks in the Nethermind Ethereum client.\n\n2. What dependencies does this code file have?\n- This code file depends on several other modules and interfaces from the Nethermind project, including `IBlockTree`, `INetworkConfig`, `IPeerPool`, `IStaticNodesManager`, and `IEnode`.\n\n3. What are some of the JSON-RPC methods that can be called on an instance of `AdminRpcModule`?\n- Some of the JSON-RPC methods that can be called on an instance of `AdminRpcModule` include `admin_addPeer`, `admin_removePeer`, `admin_peers`, `admin_nodeInfo`, `admin_dataDir`, `admin_setSolc`, and `admin_prune`.",
  "checksum": "c93531cb94795aec642998eb40dfd7bd"
}